#pragma once
#include <array>
#include <string>

namespace Neon {

enum struct GraphNodeType
{
    Compute = 0 /**< dependency generated by analyzing data dependency */,
    Halo = 1 /**< hints for scheduling **/,
    Sync = 2 /**< User defined scheduling */,
    Anchor = 3 /**< Anchor node: begin or end */
};

/**
 * Set of utilities for GraphNodeType options.
 */
struct GraphNodeTypeUtil
{
    /**
     * Number of configurations for the enum
     */
    static const int nConfig{static_cast<int>(3)};

    /**
     * Convert enum value to string
     *
     * @param dataView
     */
    static auto toString(GraphNodeType dataView) -> std::string;

    /**
     * Returns all valid configuration for GraphNodeType
     */
    static auto validOptions() -> std::array<Neon::GraphNodeType, GraphNodeTypeUtil::nConfig>;

    /**
     * Convert an integer to a GraphNodeType
     */
    static auto fromInt(int val) -> GraphNodeType;

    /**
     * Convert a GraphNodeType to an integer
     */
    static auto toInt(GraphNodeType dataView) -> int;
};

}  // namespace Neon

/**
 * operator<<
 */
std::ostream& operator<<(std::ostream& os, Neon::GraphNodeType const& m);