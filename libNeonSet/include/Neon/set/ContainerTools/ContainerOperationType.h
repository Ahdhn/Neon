#pragma once

#include "Neon/set/DevSet.h"
#include "Neon/set/dependencyTools/DataParsing.h"
#include "functional"
#include "type_traits"

/**
 * Abstract interface to hide
 */

namespace Neon::set::internal {

enum struct ContainerOperationType
{
    compute = 0 /**< dependency generated by analyzing data dependency */,
    halo = 1 /**< hints for scheduling **/,
    sync = 2 /**< User defined scheduling */,
    anchor = 3 /**< Anchor node: begin or end */
};


struct ContainerOperationTypeUtils
{
    static constexpr int nOptions = 4;

    /**
     * Convert type to string
     */
    static auto toString(ContainerOperationType option) -> std::string;

    /**
     * Returns the type associated to a string
     */
    static auto fromString(const std::string& option) -> ContainerOperationType;
    
    /**
     * Return available options
     */
    static auto getOptions() -> std::array<ContainerOperationType, nOptions>;
};


}  // namespace Neon::set::internal
/**
 * operator<<
 */
std::ostream& operator<<(std::ostream& os, Neon::set::internal::ContainerOperationType const& m);